// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: temp.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Temp {
  public static partial class TempService
  {
    static readonly string __ServiceName = "temp.TempService";

    static readonly grpc::Marshaller<global::Temp.SetTempRequest> __Marshaller_temp_SetTempRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.SetTempRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.SetTempResponse> __Marshaller_temp_SetTempResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.SetTempResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ViewTempRequest> __Marshaller_temp_ViewTempRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ViewTempRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ViewTempResponse> __Marshaller_temp_ViewTempResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ViewTempResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ChangeTempRequest> __Marshaller_temp_ChangeTempRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ChangeTempRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ChangeTempResponse> __Marshaller_temp_ChangeTempResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ChangeTempResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ViewAllTempRequest> __Marshaller_temp_ViewAllTempRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ViewAllTempRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Temp.ViewAllTempResponse> __Marshaller_temp_ViewAllTempResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Temp.ViewAllTempResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Temp.SetTempRequest, global::Temp.SetTempResponse> __Method_SetTemp = new grpc::Method<global::Temp.SetTempRequest, global::Temp.SetTempResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTemp",
        __Marshaller_temp_SetTempRequest,
        __Marshaller_temp_SetTempResponse);

    static readonly grpc::Method<global::Temp.ViewTempRequest, global::Temp.ViewTempResponse> __Method_ViewTemp = new grpc::Method<global::Temp.ViewTempRequest, global::Temp.ViewTempResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ViewTemp",
        __Marshaller_temp_ViewTempRequest,
        __Marshaller_temp_ViewTempResponse);

    static readonly grpc::Method<global::Temp.ChangeTempRequest, global::Temp.ChangeTempResponse> __Method_ChangeTemp = new grpc::Method<global::Temp.ChangeTempRequest, global::Temp.ChangeTempResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeTemp",
        __Marshaller_temp_ChangeTempRequest,
        __Marshaller_temp_ChangeTempResponse);

    static readonly grpc::Method<global::Temp.ViewAllTempRequest, global::Temp.ViewAllTempResponse> __Method_ViewAllTemp = new grpc::Method<global::Temp.ViewAllTempRequest, global::Temp.ViewAllTempResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ViewAllTemp",
        __Marshaller_temp_ViewAllTempRequest,
        __Marshaller_temp_ViewAllTempResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Temp.TempReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TempService</summary>
    [grpc::BindServiceMethod(typeof(TempService), "BindService")]
    public abstract partial class TempServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Temp.SetTempResponse> SetTemp(global::Temp.SetTempRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Temp.ViewTempResponse> ViewTemp(global::Temp.ViewTempRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Temp.ChangeTempResponse> ChangeTemp(global::Temp.ChangeTempRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ViewAllTemp(global::Temp.ViewAllTempRequest request, grpc::IServerStreamWriter<global::Temp.ViewAllTempResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TempService</summary>
    public partial class TempServiceClient : grpc::ClientBase<TempServiceClient>
    {
      /// <summary>Creates a new client for TempService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TempServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TempService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TempServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TempServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TempServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Temp.SetTempResponse SetTemp(global::Temp.SetTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTemp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Temp.SetTempResponse SetTemp(global::Temp.SetTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTemp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.SetTempResponse> SetTempAsync(global::Temp.SetTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTempAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.SetTempResponse> SetTempAsync(global::Temp.SetTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTemp, null, options, request);
      }
      public virtual global::Temp.ViewTempResponse ViewTemp(global::Temp.ViewTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewTemp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Temp.ViewTempResponse ViewTemp(global::Temp.ViewTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ViewTemp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.ViewTempResponse> ViewTempAsync(global::Temp.ViewTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewTempAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.ViewTempResponse> ViewTempAsync(global::Temp.ViewTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ViewTemp, null, options, request);
      }
      public virtual global::Temp.ChangeTempResponse ChangeTemp(global::Temp.ChangeTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeTemp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Temp.ChangeTempResponse ChangeTemp(global::Temp.ChangeTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeTemp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.ChangeTempResponse> ChangeTempAsync(global::Temp.ChangeTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeTempAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Temp.ChangeTempResponse> ChangeTempAsync(global::Temp.ChangeTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeTemp, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Temp.ViewAllTempResponse> ViewAllTemp(global::Temp.ViewAllTempRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewAllTemp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Temp.ViewAllTempResponse> ViewAllTemp(global::Temp.ViewAllTempRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ViewAllTemp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TempServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TempServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TempServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetTemp, serviceImpl.SetTemp)
          .AddMethod(__Method_ViewTemp, serviceImpl.ViewTemp)
          .AddMethod(__Method_ChangeTemp, serviceImpl.ChangeTemp)
          .AddMethod(__Method_ViewAllTemp, serviceImpl.ViewAllTemp).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TempServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetTemp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Temp.SetTempRequest, global::Temp.SetTempResponse>(serviceImpl.SetTemp));
      serviceBinder.AddMethod(__Method_ViewTemp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Temp.ViewTempRequest, global::Temp.ViewTempResponse>(serviceImpl.ViewTemp));
      serviceBinder.AddMethod(__Method_ChangeTemp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Temp.ChangeTempRequest, global::Temp.ChangeTempResponse>(serviceImpl.ChangeTemp));
      serviceBinder.AddMethod(__Method_ViewAllTemp, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Temp.ViewAllTempRequest, global::Temp.ViewAllTempResponse>(serviceImpl.ViewAllTemp));
    }

  }
}
#endregion
