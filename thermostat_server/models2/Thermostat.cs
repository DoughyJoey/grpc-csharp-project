// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: thermostat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Thermostat {

  /// <summary>Holder for reflection information generated from thermostat.proto</summary>
  public static partial class ThermostatReflection {

    #region Descriptor
    /// <summary>File descriptor for thermostat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ThermostatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB0aGVybW9zdGF0LnByb3RvEgp0aGVybW9zdGF0IigKBFRlbXASCgoCaWQY",
            "ASABKAkSFAoMdGVtcF9zZXR0aW5nGAIgASgJIjAKDlNldFRlbXBSZXF1ZXN0",
            "Eh4KBHRlbXAYASABKAsyEC50aGVybW9zdGF0LlRlbXAiMQoPU2V0VGVtcFJl",
            "c3BvbnNlEh4KBHRlbXAYASABKAsyEC50aGVybW9zdGF0LlRlbXAiIgoPVmll",
            "d1RlbXBSZXF1ZXN0Eg8KB3RlbXBfaWQYASABKAkiMgoQVmlld1RlbXBSZXNw",
            "b25zZRIeCgR0ZW1wGAEgASgLMhAudGhlcm1vc3RhdC5UZW1wIjMKEUNoYW5n",
            "ZVRlbXBSZXF1ZXN0Eh4KBHRlbXAYASABKAsyEC50aGVybW9zdGF0LlRlbXAi",
            "NAoSQ2hhbmdlVGVtcFJlc3BvbnNlEh4KBHRlbXAYASABKAsyEC50aGVybW9z",
            "dGF0LlRlbXAy8QEKEVRoZXJtb3N0YXRTZXJ2aWNlEkQKB1NldFRlbXASGi50",
            "aGVybW9zdGF0LlNldFRlbXBSZXF1ZXN0GhsudGhlcm1vc3RhdC5TZXRUZW1w",
            "UmVzcG9uc2UiABJHCghWaWV3VGVtcBIbLnRoZXJtb3N0YXQuVmlld1RlbXBS",
            "ZXF1ZXN0GhwudGhlcm1vc3RhdC5WaWV3VGVtcFJlc3BvbnNlIgASTQoKQ2hh",
            "bmdlVGVtcBIdLnRoZXJtb3N0YXQuQ2hhbmdlVGVtcFJlcXVlc3QaHi50aGVy",
            "bW9zdGF0LkNoYW5nZVRlbXBSZXNwb25zZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.Temp), global::Thermostat.Temp.Parser, new[]{ "Id", "TempSetting" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.SetTempRequest), global::Thermostat.SetTempRequest.Parser, new[]{ "Temp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.SetTempResponse), global::Thermostat.SetTempResponse.Parser, new[]{ "Temp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.ViewTempRequest), global::Thermostat.ViewTempRequest.Parser, new[]{ "TempId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.ViewTempResponse), global::Thermostat.ViewTempResponse.Parser, new[]{ "Temp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.ChangeTempRequest), global::Thermostat.ChangeTempRequest.Parser, new[]{ "Temp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Thermostat.ChangeTempResponse), global::Thermostat.ChangeTempResponse.Parser, new[]{ "Temp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Temp : pb::IMessage<Temp> {
    private static readonly pb::MessageParser<Temp> _parser = new pb::MessageParser<Temp>(() => new Temp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Temp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Temp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Temp(Temp other) : this() {
      id_ = other.id_;
      tempSetting_ = other.tempSetting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Temp Clone() {
      return new Temp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "temp_setting" field.</summary>
    public const int TempSettingFieldNumber = 2;
    private string tempSetting_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TempSetting {
      get { return tempSetting_; }
      set {
        tempSetting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Temp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Temp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TempSetting != other.TempSetting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TempSetting.Length != 0) hash ^= TempSetting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TempSetting.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TempSetting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TempSetting.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TempSetting);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Temp other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TempSetting.Length != 0) {
        TempSetting = other.TempSetting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TempSetting = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTempRequest : pb::IMessage<SetTempRequest> {
    private static readonly pb::MessageParser<SetTempRequest> _parser = new pb::MessageParser<SetTempRequest>(() => new SetTempRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTempRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempRequest(SetTempRequest other) : this() {
      temp_ = other.temp_ != null ? other.temp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempRequest Clone() {
      return new SetTempRequest(this);
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 1;
    private global::Thermostat.Temp temp_;
    /// <summary>
    /// will not contain an id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Thermostat.Temp Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTempRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTempRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Temp, other.Temp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (temp_ != null) hash ^= Temp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (temp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Temp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (temp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTempRequest other) {
      if (other == null) {
        return;
      }
      if (other.temp_ != null) {
        if (temp_ == null) {
          Temp = new global::Thermostat.Temp();
        }
        Temp.MergeFrom(other.Temp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (temp_ == null) {
              Temp = new global::Thermostat.Temp();
            }
            input.ReadMessage(Temp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTempResponse : pb::IMessage<SetTempResponse> {
    private static readonly pb::MessageParser<SetTempResponse> _parser = new pb::MessageParser<SetTempResponse>(() => new SetTempResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTempResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempResponse(SetTempResponse other) : this() {
      temp_ = other.temp_ != null ? other.temp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTempResponse Clone() {
      return new SetTempResponse(this);
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 1;
    private global::Thermostat.Temp temp_;
    /// <summary>
    /// will contain an id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Thermostat.Temp Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTempResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTempResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Temp, other.Temp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (temp_ != null) hash ^= Temp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (temp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Temp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (temp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTempResponse other) {
      if (other == null) {
        return;
      }
      if (other.temp_ != null) {
        if (temp_ == null) {
          Temp = new global::Thermostat.Temp();
        }
        Temp.MergeFrom(other.Temp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (temp_ == null) {
              Temp = new global::Thermostat.Temp();
            }
            input.ReadMessage(Temp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewTempRequest : pb::IMessage<ViewTempRequest> {
    private static readonly pb::MessageParser<ViewTempRequest> _parser = new pb::MessageParser<ViewTempRequest>(() => new ViewTempRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewTempRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempRequest(ViewTempRequest other) : this() {
      tempId_ = other.tempId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempRequest Clone() {
      return new ViewTempRequest(this);
    }

    /// <summary>Field number for the "temp_id" field.</summary>
    public const int TempIdFieldNumber = 1;
    private string tempId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TempId {
      get { return tempId_; }
      set {
        tempId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewTempRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewTempRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TempId != other.TempId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TempId.Length != 0) hash ^= TempId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TempId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TempId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TempId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TempId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewTempRequest other) {
      if (other == null) {
        return;
      }
      if (other.TempId.Length != 0) {
        TempId = other.TempId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TempId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewTempResponse : pb::IMessage<ViewTempResponse> {
    private static readonly pb::MessageParser<ViewTempResponse> _parser = new pb::MessageParser<ViewTempResponse>(() => new ViewTempResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewTempResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempResponse(ViewTempResponse other) : this() {
      temp_ = other.temp_ != null ? other.temp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewTempResponse Clone() {
      return new ViewTempResponse(this);
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 1;
    private global::Thermostat.Temp temp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Thermostat.Temp Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewTempResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewTempResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Temp, other.Temp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (temp_ != null) hash ^= Temp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (temp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Temp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (temp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewTempResponse other) {
      if (other == null) {
        return;
      }
      if (other.temp_ != null) {
        if (temp_ == null) {
          Temp = new global::Thermostat.Temp();
        }
        Temp.MergeFrom(other.Temp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (temp_ == null) {
              Temp = new global::Thermostat.Temp();
            }
            input.ReadMessage(Temp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeTempRequest : pb::IMessage<ChangeTempRequest> {
    private static readonly pb::MessageParser<ChangeTempRequest> _parser = new pb::MessageParser<ChangeTempRequest>(() => new ChangeTempRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTempRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempRequest(ChangeTempRequest other) : this() {
      temp_ = other.temp_ != null ? other.temp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempRequest Clone() {
      return new ChangeTempRequest(this);
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 1;
    private global::Thermostat.Temp temp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Thermostat.Temp Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTempRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTempRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Temp, other.Temp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (temp_ != null) hash ^= Temp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (temp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Temp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (temp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTempRequest other) {
      if (other == null) {
        return;
      }
      if (other.temp_ != null) {
        if (temp_ == null) {
          Temp = new global::Thermostat.Temp();
        }
        Temp.MergeFrom(other.Temp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (temp_ == null) {
              Temp = new global::Thermostat.Temp();
            }
            input.ReadMessage(Temp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeTempResponse : pb::IMessage<ChangeTempResponse> {
    private static readonly pb::MessageParser<ChangeTempResponse> _parser = new pb::MessageParser<ChangeTempResponse>(() => new ChangeTempResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTempResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Thermostat.ThermostatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempResponse(ChangeTempResponse other) : this() {
      temp_ = other.temp_ != null ? other.temp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTempResponse Clone() {
      return new ChangeTempResponse(this);
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 1;
    private global::Thermostat.Temp temp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Thermostat.Temp Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTempResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTempResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Temp, other.Temp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (temp_ != null) hash ^= Temp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (temp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Temp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (temp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTempResponse other) {
      if (other == null) {
        return;
      }
      if (other.temp_ != null) {
        if (temp_ == null) {
          Temp = new global::Thermostat.Temp();
        }
        Temp.MergeFrom(other.Temp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (temp_ == null) {
              Temp = new global::Thermostat.Temp();
            }
            input.ReadMessage(Temp);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
