// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: watch.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SmartWatch {
  public static partial class WatchService
  {
    static readonly string __ServiceName = "smart_watch.WatchService";

    static readonly grpc::Marshaller<global::SmartWatch.CalorieRequest> __Marshaller_smart_watch_CalorieRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.CalorieRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SmartWatch.CalorieResponse> __Marshaller_smart_watch_CalorieResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.CalorieResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SmartWatch.SleepAverageRequest> __Marshaller_smart_watch_SleepAverageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.SleepAverageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SmartWatch.SleepAverageResponse> __Marshaller_smart_watch_SleepAverageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.SleepAverageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SmartWatch.MaxHeartRateRequest> __Marshaller_smart_watch_MaxHeartRateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.MaxHeartRateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SmartWatch.MaxHeartRateResponse> __Marshaller_smart_watch_MaxHeartRateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SmartWatch.MaxHeartRateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SmartWatch.CalorieRequest, global::SmartWatch.CalorieResponse> __Method_Calories = new grpc::Method<global::SmartWatch.CalorieRequest, global::SmartWatch.CalorieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Calories",
        __Marshaller_smart_watch_CalorieRequest,
        __Marshaller_smart_watch_CalorieResponse);

    static readonly grpc::Method<global::SmartWatch.SleepAverageRequest, global::SmartWatch.SleepAverageResponse> __Method_SleepAverage = new grpc::Method<global::SmartWatch.SleepAverageRequest, global::SmartWatch.SleepAverageResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SleepAverage",
        __Marshaller_smart_watch_SleepAverageRequest,
        __Marshaller_smart_watch_SleepAverageResponse);

    static readonly grpc::Method<global::SmartWatch.MaxHeartRateRequest, global::SmartWatch.MaxHeartRateResponse> __Method_MaxHeartRate = new grpc::Method<global::SmartWatch.MaxHeartRateRequest, global::SmartWatch.MaxHeartRateResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "MaxHeartRate",
        __Marshaller_smart_watch_MaxHeartRateRequest,
        __Marshaller_smart_watch_MaxHeartRateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SmartWatch.WatchReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WatchService</summary>
    [grpc::BindServiceMethod(typeof(WatchService), "BindService")]
    public abstract partial class WatchServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SmartWatch.CalorieResponse> Calories(global::SmartWatch.CalorieRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SmartWatch.SleepAverageResponse> SleepAverage(grpc::IAsyncStreamReader<global::SmartWatch.SleepAverageRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MaxHeartRate(grpc::IAsyncStreamReader<global::SmartWatch.MaxHeartRateRequest> requestStream, grpc::IServerStreamWriter<global::SmartWatch.MaxHeartRateResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WatchService</summary>
    public partial class WatchServiceClient : grpc::ClientBase<WatchServiceClient>
    {
      /// <summary>Creates a new client for WatchService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WatchServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WatchService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WatchServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WatchServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WatchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SmartWatch.CalorieResponse Calories(global::SmartWatch.CalorieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Calories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SmartWatch.CalorieResponse Calories(global::SmartWatch.CalorieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Calories, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SmartWatch.CalorieResponse> CaloriesAsync(global::SmartWatch.CalorieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CaloriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SmartWatch.CalorieResponse> CaloriesAsync(global::SmartWatch.CalorieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Calories, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::SmartWatch.SleepAverageRequest, global::SmartWatch.SleepAverageResponse> SleepAverage(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SleepAverage(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::SmartWatch.SleepAverageRequest, global::SmartWatch.SleepAverageResponse> SleepAverage(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SleepAverage, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::SmartWatch.MaxHeartRateRequest, global::SmartWatch.MaxHeartRateResponse> MaxHeartRate(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MaxHeartRate(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::SmartWatch.MaxHeartRateRequest, global::SmartWatch.MaxHeartRateResponse> MaxHeartRate(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_MaxHeartRate, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WatchServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WatchServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WatchServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Calories, serviceImpl.Calories)
          .AddMethod(__Method_SleepAverage, serviceImpl.SleepAverage)
          .AddMethod(__Method_MaxHeartRate, serviceImpl.MaxHeartRate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WatchServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Calories, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartWatch.CalorieRequest, global::SmartWatch.CalorieResponse>(serviceImpl.Calories));
      serviceBinder.AddMethod(__Method_SleepAverage, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::SmartWatch.SleepAverageRequest, global::SmartWatch.SleepAverageResponse>(serviceImpl.SleepAverage));
      serviceBinder.AddMethod(__Method_MaxHeartRate, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::SmartWatch.MaxHeartRateRequest, global::SmartWatch.MaxHeartRateResponse>(serviceImpl.MaxHeartRate));
    }

  }
}
#endregion
